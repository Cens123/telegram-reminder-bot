import logging
import sqlite3
import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
import asyncio # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å scheduler

# –í–∫–ª—é—á–∏—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–º–µ–Ω–∏—Ç–µ '–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê' –Ω–∞ —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç BotFather
TOKEN = '8031651136:AAFn6zQlfNO4WBdDxACko_MlBzJ19lmocBY'
DB_NAME = 'reminders.db'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
scheduler = AsyncIOScheduler()

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            state TEXT
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS reminders (
            reminder_id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            text TEXT NOT NULL,
            time TEXT NOT NULL, -- –§–æ—Ä–º–∞—Ç HH:MM
            days TEXT NOT NULL, -- 'everyday', 'weekdays', 'specific:mon,tue,wed'
            active INTEGER DEFAULT 1,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    conn.commit()
    conn.close()

def save_user_state(user_id: int, state: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('INSERT OR REPLACE INTO users (user_id, state) VALUES (?, ?)', (user_id, state))
    conn.commit()
    conn.close()

def get_user_state(user_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT state FROM users WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else 'start'

def add_reminder_to_db(user_id: int, text: str, time: str, days: str) -> int:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID."""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute(
        'INSERT INTO reminders (user_id, text, time, days) VALUES (?, ?, ?, ?)',
        (user_id, text, time, days)
    )
    reminder_id = cursor.lastrowid
    conn.commit()
    conn.close()
    return reminder_id

def get_reminders_from_db(user_id: int) -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT reminder_id, text, time, days FROM reminders WHERE user_id = ? AND active = 1', (user_id,))
    reminders = cursor.fetchall()
    conn.close()
    return reminders

def get_reminder_by_id(reminder_id: int) -> tuple | None:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –µ–≥–æ ID."""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT reminder_id, user_id, text, time, days FROM reminders WHERE reminder_id = ?', (reminder_id,))
    reminder = cursor.fetchone()
    conn.close()
    return reminder

def update_reminder_in_db(reminder_id: int, text: str = None, time: str = None, days: str = None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    updates = []
    params = []
    if text:
        updates.append("text = ?")
        params.append(text)
    if time:
        updates.append("time = ?")
        params.append(time)
    if days:
        updates.append("days = ?")
        params.append(days)

    if updates:
        query = f"UPDATE reminders SET {', '.join(updates)} WHERE reminder_id = ?"
        params.append(reminder_id)
        cursor.execute(query, tuple(params))
        conn.commit()
    conn.close()

def delete_reminder_from_db(reminder_id: int):
    """–£–¥–∞–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç)."""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('UPDATE reminders SET active = 0 WHERE reminder_id = ?', (reminder_id,))
    conn.commit()
    conn.close()

def count_active_reminders(user_id: int) -> int:
    """–°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM reminders WHERE user_id = ? AND active = 1', (user_id,))
    count = cursor.fetchone()[0]
    conn.close()
    return count

# --- –§—É–Ω–∫—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ APScheduler ---
async def send_reminder(context: ContextTypes.DEFAULT_TYPE, user_id: int, reminder_text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    await context.bot.send_message(chat_id=user_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder_text}")
    logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{reminder_text}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")


def schedule_reminder_job(context: ContextTypes.DEFAULT_TYPE, user_id: int, reminder_id: int, text: str, time_str: str, days_str: str):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    job_id = f"reminder_{user_id}_{reminder_id}"
    if scheduler.get_job(job_id):
        scheduler.remove_job(job_id)

    hour, minute = map(int, time_str.split(':'))

    if days_str == 'everyday':
        scheduler.add_job(send_reminder, 'cron', hour=hour, minute=minute, args=[context, user_id, text], id=job_id)
        logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{text}' –¥–ª—è {user_id} –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {time_str}")
    elif days_str == 'weekdays':
        # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –≤ APScheduler: 0=–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 1=–í—Ç–æ—Ä–Ω–∏–∫, ..., 6=–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        scheduler.add_job(send_reminder, 'cron', day_of_week='mon-fri', hour=hour, minute=minute, args=[context, user_id, text], id=job_id)
        logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{text}' –¥–ª—è {user_id} –ø–æ –±—É–¥–Ω—è–º –≤ {time_str}")
    elif days_str.startswith('specific:'):
        specific_days_codes = {
            'mon': 0, 'tue': 1, 'wed': 2, 'thu': 3, 'fri': 4, 'sat': 5, 'sun': 6
        }
        days_list = [specific_days_codes[d.strip()] for d in days_str[len('specific:'):].split(',')]
        scheduler.add_job(send_reminder, 'cron', day_of_week=days_list, hour=hour, minute=minute, args=[context, user_id, text], id=job_id)
        logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{text}' –¥–ª—è {user_id} –ø–æ –¥–Ω—è–º {days_list} –≤ {time_str}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    user_id = update.effective_user.id
    init_db() # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
    save_user_state(user_id, 'start')

    keyboard = [
        [
            InlineKeyboardButton("–ë–∞–∑–æ–≤—ã–π –ø—Ä–µ—Å–µ—Ç üöÄ", callback_data="preset"),
            InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚öôÔ∏è", callback_data="custom"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.mention_html()}! üëã\n"
        "–Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –ü–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–±—ã—Ç—å.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞, –≤—ã–±–µ—Ä–∏, –∫–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        reply_markup=reply_markup,
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ Inline –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callbackQuery, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ –±—ã—Ç—å "–≤–∏—Å—è—á–µ–π"
    user_id = query.from_user.id

    if query.data == "preset":
        # –ë–∞–∑–æ–≤—ã–π –ø—Ä–µ—Å–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        base_reminders = [
            {"text": "–°–¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É", "time": "10:00", "days": "everyday"},
            {"text": "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π —Ä–æ–ª–∏–∫", "time": "10:00", "days": "everyday"},
            {"text": "–ü–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É", "time": "20:00", "days": "everyday"},
            {"text": "–°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å", "time": "22:00", "days": "everyday"},
        ]
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ–±—ã –Ω–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ 5 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        current_reminders_count = count_active_reminders(user_id)
        if current_reminders_count + len(base_reminders) > 5:
            await query.edit_message_text("–ù–µ –º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–π –ø—Ä–µ—Å–µ—Ç, —É –≤–∞—Å —É–∂–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–º–∞–∫—Å–∏–º—É–º 5). –£–¥–∞–ª–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ—Å–µ—Ç.")
            return

        for r in base_reminders:
            reminder_id = add_reminder_to_db(user_id, r["text"], r["time"], r["days"])
            schedule_reminder_job(context, user_id, reminder_id, r["text"], r["time"], r["days"])

        await query.edit_message_text(
            "–ë–∞–∑–æ–≤—ã–π –ø—Ä–µ—Å–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /myreminders."
        )
        save_user_state(user_id, 'start')

    elif query.data == "custom":
        # –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        await query.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à–µ –ø–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")
        await ask_for_reminder_text(user_id, context)

    elif query.data == "add_reminder":
        if count_active_reminders(user_id) >= 5:
            await query.edit_message_text("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≤ 5 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –¥–µ–Ω—å. –£–¥–∞–ª–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ.")
            return
        await query.edit_message_text("–•–æ—Ä–æ—à–æ, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        save_user_state(user_id, 'awaiting_reminder_text')

    elif query.data.startswith("edit_reminder_"):
        reminder_id = int(query.data.split('_')[2])
        context.user_data['editing_reminder_id'] = reminder_id
        await query.edit_message_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —ç—Ç–æ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏?",
                                     reply_markup=InlineKeyboardMarkup([
                                         [InlineKeyboardButton("–¢–µ–∫—Å—Ç", callback_data=f"edit_text_{reminder_id}")],
                                         [InlineKeyboardButton("–í—Ä–µ–º—è", callback_data=f"edit_time_{reminder_id}")],
                                         [InlineKeyboardButton("–î–Ω–∏ –Ω–µ–¥–µ–ª–∏", callback_data=f"edit_days_{reminder_id}")],
                                         [InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –º–æ–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º", callback_data="my_reminders")]
                                     ]))
        save_user_state(user_id, 'editing_reminder')

    elif query.data.startswith("edit_text_"):
        reminder_id = int(query.data.split('_')[2])
        context.user_data['editing_reminder_id'] = reminder_id
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        save_user_state(user_id, 'awaiting_edit_text')

    elif query.data.startswith("edit_time_"):
        reminder_id = int(query.data.split('_')[2])
        context.user_data['editing_reminder_id'] = reminder_id
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):")
        save_user_state(user_id, 'awaiting_edit_time')

    elif query.data.startswith("edit_days_"):
        reminder_id = int(query.data.split('_')[2])
        context.user_data['editing_reminder_id'] = reminder_id
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=get_days_keyboard())
        save_user_state(user_id, 'awaiting_edit_days')

    elif query.data.startswith("delete_reminder_"):
        reminder_id = int(query.data.split('_')[2])
        delete_reminder_from_db(reminder_id)
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        job_id = f"reminder_{user_id}_{reminder_id}"
        if scheduler.get_job(job_id):
            scheduler.remove_job(job_id)
        await query.edit_message_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
        await show_my_reminders(update, context) # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

    elif query.data == "my_reminders":
        await show_my_reminders(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    elif query.data in ['days_everyday', 'days_weekdays', 'days_specific']:
        context.user_data['selected_days_type'] = query.data
        if query.data == 'days_specific':
            keyboard = [
                [InlineKeyboardButton("–ü–Ω", callback_data="day_mon"),
                 InlineKeyboardButton("–í—Ç", callback_data="day_tue"),
                 InlineKeyboardButton("–°—Ä", callback_data="day_wed")],
                [InlineKeyboardButton("–ß—Ç", callback_data="day_thu"),
                 InlineKeyboardButton("–ü—Ç", callback_data="day_fri"),
                 InlineKeyboardButton("–°–±", callback_data="day_sat")],
                [InlineKeyboardButton("–í—Å", callback_data="day_sun")],
                [InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–Ω–∏", callback_data="save_specific_days")]
            ]
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
            context.user_data['specific_days'] = []
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–Ω–µ–π
            days_str = ""
            if query.data == 'days_everyday':
                days_str = 'everyday'
            elif query.data == 'days_weekdays':
                days_str = 'weekdays'

            current_state = get_user_state(user_id)
            if current_state == 'awaiting_days':
                context.user_data['reminder_days'] = days_str
                await ask_for_reminder_time(user_id, context)
            elif current_state == 'awaiting_edit_days':
                reminder_id = context.user_data.get('editing_reminder_id')
                if reminder_id:
                    update_reminder_in_db(reminder_id, days=days_str)
                    reminder_data = get_reminder_by_id(reminder_id)
                    if reminder_data:
                        r_id, u_id, text, time, days = reminder_data
                        schedule_reminder_job(context, u_id, r_id, text, time, days)
                    await query.edit_message_text("–î–Ω–∏ –Ω–µ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
                    await show_my_reminders(update, context)
                save_user_state(user_id, 'start') # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            else:
                 await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å /start.")

    elif query.data.startswith("day_"):
        day = query.data.split('_')[1]
        if day not in context.user_data['specific_days']:
            context.user_data['specific_days'].append(day)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–Ω—è–º–∏
        selected_days_text = ", ".join([d.upper() for d in context.user_data['specific_days']])
        await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω–æ: {selected_days_text}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏:", reply_markup=get_specific_days_keyboard(context.user_data['specific_days']))

    elif query.data == "save_specific_days":
        if not context.user_data.get('specific_days'):
            await query.edit_message_text("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–Ω—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ.")
            return

        specific_days_str = "specific:" + ",".join(context.user_data['specific_days'])

        current_state = get_user_state(user_id)
        if current_state == 'awaiting_days':
            context.user_data['reminder_days'] = specific_days_str
            await ask_for_reminder_time(user_id, context)
        elif current_state == 'awaiting_edit_days':
            reminder_id = context.user_data.get('editing_reminder_id')
            if reminder_id:
                update_reminder_in_db(reminder_id, days=specific_days_str)
                reminder_data = get_reminder_by_id(reminder_id)
                if reminder_data:
                    r_id, u_id, text, time, days = reminder_data
                    schedule_reminder_job(context, u_id, r_id, text, time, days)
                await query.edit_message_text("–î–Ω–∏ –Ω–µ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
                await show_my_reminders(update, context)
            save_user_state(user_id, 'start') # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        else:
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–Ω–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å /start.")


async def ask_for_reminder_text(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    keyboard = [
        [InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É", callback_data="preset_text_charge")],
        [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π —Ä–æ–ª–∏–∫", callback_data="preset_text_motiv")],
        [InlineKeyboardButton("–ü–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É", callback_data="preset_text_book")],
        [InlineKeyboardButton("–°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å", callback_data="preset_text_plans")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=user_id,
        text="–í—ã–±–µ—Ä–∏ –±–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ç–µ–∫—Å—Ç:",
        reply_markup=reply_markup,
    )
    save_user_state(user_id, 'awaiting_reminder_text')

async def ask_for_reminder_time(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    await context.bot.send_message(
        chat_id=user_id,
        text="–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):"
    )
    save_user_state(user_id, 'awaiting_reminder_time')

async def ask_for_reminder_days(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    await context.bot.send_message(
        chat_id=user_id,
        text="–ö–æ–≥–¥–∞ –¥–æ–ª–∂–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?",
        reply_markup=get_days_keyboard()
    )
    save_user_state(user_id, 'awaiting_days')

def get_days_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏."""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ö–∞–∂–¥—ã–π –¥–µ–Ω—å", callback_data="days_everyday")],
        [InlineKeyboardButton("–ö—Ä–æ–º–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö (–ü–Ω-–ü—Ç)", callback_data="days_weekdays")],
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–Ω–∏", callback_data="days_specific")]
    ])

def get_specific_days_keyboard(selected_days: list):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–Ω–µ–π —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö."""
    keyboard = [
        [InlineKeyboardButton(f"{'‚úÖ ' if 'mon' in selected_days else ''}–ü–Ω", callback_data="day_mon"),
         InlineKeyboardButton(f"{'‚úÖ ' if 'tue' in selected_days else ''}–í—Ç", callback_data="day_tue"),
         InlineKeyboardButton(f"{'‚úÖ ' if 'wed' in selected_days else ''}–°—Ä", callback_data="day_wed")],
        [InlineKeyboardButton(f"{'‚úÖ ' if 'thu' in selected_days else ''}–ß—Ç", callback_data="day_thu"),
         InlineKeyboardButton(f"{'‚úÖ ' if 'fri' in selected_days else ''}–ü—Ç", callback_data="day_fri"),
         InlineKeyboardButton(f"{'‚úÖ ' if 'sat' in selected_days else ''}–°–±", callback_data="day_sat")],
        [InlineKeyboardButton(f"{'‚úÖ ' if 'sun' in selected_days else ''}–í—Å", callback_data="day_sun")],
        [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏", callback_data="save_specific_days")]
    ]
    return InlineKeyboardMarkup(keyboard)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    user_id = update.effective_user.id
    user_state = get_user_state(user_id)
    text = update.message.text

    if user_state == 'awaiting_reminder_text':
        if text.startswith('preset_text_'): # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–µ—Å–µ—Ç–∞
            preset_map = {
                "preset_text_charge": "–°–¥–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É",
                "preset_text_motiv": "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π —Ä–æ–ª–∏–∫",
                "preset_text_book": "–ü–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É",
                "preset_text_plans": "–°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å",
            }
            context.user_data['reminder_text'] = preset_map.get(text, text) # –∏—Å–ø–æ–ª—å–∑—É–µ–º text –¥–ª—è —Å–ª—É—á–∞—è –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å)
        else: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Å–≤–æ–π —Ç–µ–∫—Å—Ç
            context.user_data['reminder_text'] = text
        await ask_for_reminder_days(user_id, context) # –ò–∑–º–µ–Ω–µ–Ω –ø–æ—Ä—è–¥–æ–∫: —Å–Ω–∞—á–∞–ª–∞ –¥–Ω–∏, –ø–æ—Ç–æ–º –≤—Ä–µ–º—è

    elif user_state == 'awaiting_reminder_time':
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ß–ß:–ú–ú
        try:
            hour, minute = map(int, text.split(':'))
            if not (0 <= hour <= 23 and 0 <= minute <= 59):
                raise ValueError
            context.user_data['reminder_time'] = text
            # –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            reminder_text = context.user_data.get('reminder_text')
            reminder_days = context.user_data.get('reminder_days')
            
            if reminder_text and text and reminder_days:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                if count_active_reminders(user_id) >= 5:
                    await update.message.reply_text("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≤ 5 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –¥–µ–Ω—å. –£–¥–∞–ª–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ.")
                    save_user_state(user_id, 'start')
                    return
                
                reminder_id = add_reminder_to_db(user_id, reminder_text, text, reminder_days)
                schedule_reminder_job(context, user_id, reminder_id, reminder_text, text, reminder_days)
                await update.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{reminder_text}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {text} ({get_days_display_name(reminder_days)}).")
                save_user_state(user_id, 'start')
            else:
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–Ω–æ–≤–∞ —Å /addreminder.")
                save_user_state(user_id, 'start')

        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30).")

    elif user_state == 'awaiting_edit_text':
        reminder_id = context.user_data.get('editing_reminder_id')
        if reminder_id:
            update_reminder_in_db(reminder_id, text=text)
            reminder_data = get_reminder_by_id(reminder_id)
            if reminder_data:
                r_id, u_id, r_text, r_time, r_days = reminder_data
                schedule_reminder_job(context, u_id, r_id, r_text, r_time, r_days) # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
            await update.message.reply_text("–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
            await show_my_reminders(update, context) # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        save_user_state(user_id, 'start')

    elif user_state == 'awaiting_edit_time':
        reminder_id = context.user_data.get('editing_reminder_id')
        try:
            hour, minute = map(int, text.split(':'))
            if not (0 <= hour <= 23 and 0 <= minute <= 59):
                raise ValueError
            if reminder_id:
                update_reminder_in_db(reminder_id, time=text)
                reminder_data = get_reminder_by_id(reminder_id)
                if reminder_data:
                    r_id, u_id, r_text, r_time, r_days = reminder_data
                    schedule_reminder_job(context, u_id, r_id, r_text, r_time, r_days) # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º —Å –Ω–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
                await update.message.reply_text("–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
                await show_my_reminders(update, context) # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            save_user_state(user_id, 'start')
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30).")

    else:
        # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞, –º–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –ø–æ–Ω—è–ª —Ç–≤–æ—é –∫–æ–º–∞–Ω–¥—É. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –Ω–∞—á–∞—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/addreminder - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
            "/myreminders - –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
        )

async def add_reminder_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /addreminder."""
    user_id = update.effective_user.id
    if count_active_reminders(user_id) >= 5:
        await update.message.reply_text("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≤ 5 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –¥–µ–Ω—å. –£–¥–∞–ª–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ.")
        return

    await ask_for_reminder_text(user_id, context)

async def show_my_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    reminders = get_reminders_from_db(user_id)

    if not reminders:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addreminder, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ.")
        return

    message_text = "–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
    keyboard = []
    for r_id, text, time, days_str in reminders:
        days_display = get_days_display_name(days_str)
        message_text += f"‚ñ™Ô∏è *{text}* –≤ {time} ({days_display})\n"
        keyboard.append([
            InlineKeyboardButton(f"‚öôÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å '{text}'", callback_data=f"edit_reminder_{r_id}"),
            InlineKeyboardButton(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å '{text}'", callback_data=f"delete_reminder_{r_id}")
        ])
    
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="add_reminder")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.callback_query:
        await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode='Markdown')

def get_days_display_name(days_str: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏."""
    if days_str == 'everyday':
        return '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å'
    elif days_str == 'weekdays':
        return '–ü–æ –±—É–¥–Ω—è–º'
    elif days_str.startswith('specific:'):
        specific_days_map = {
            'mon': '–ü–Ω', 'tue': '–í—Ç', 'wed': '–°—Ä', 'thu': '–ß—Ç', 'fri': '–ü—Ç', 'sat': '–°–±', 'sun': '–í—Å'
        }
        days_codes = days_str[len('specific:'):].split(',')
        return ", ".join([specific_days_map[d.strip()] for d in days_codes])
    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'


# --- –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ ---
async def load_reminders_on_startup(application: Application):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –ë–î –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –∏—Ö."""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT reminder_id, user_id, text, time, days FROM reminders WHERE active = 1')
    active_reminders = cursor.fetchall()
    conn.close()

    for r_id, user_id, text, time, days in active_reminders:
        try:
            # –î–ª—è scheduler –Ω–∞–º –Ω—É–∂–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç, –Ω–æ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ –µ–≥–æ –Ω–µ—Ç.
            # –ü–æ—ç—Ç–æ–º—É –º—ã –ø–µ—Ä–µ–¥–∞–µ–º application, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å bot –∏ –¥–∞–ª–µ–µ context
            # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± - —Ö—Ä–∞–Ω–∏—Ç—å context.bot –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ application.bot
            schedule_reminder_job(application.job_queue.run_once, user_id, r_id, text, time, days)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {r_id} –Ω–∞ —Å—Ç–∞—Ä—Ç–µ: {e}")
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {len(active_reminders)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")


def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    init_db() # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    
    application = Application.builder().token(TOKEN).build()

    # –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã APScheduler –º–æ–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å await, –µ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤ asyncio loop
    # application.run_polling() —É–∂–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç asyncio loop
    scheduler.start() # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    # –í–∞–∂–Ω–æ: load_reminders_on_startup –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ application.bot
    # –ú—ã –º–æ–∂–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ –ø–æ—Å–ª–µ build() –∏ –¥–æ run_polling()
    # –ò–ª–∏ –∫–∞–∫ job_queue.run_once, –∫–æ—Ç–æ—Ä—ã–π –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ context
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∫–∞ –±—É–¥–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å application, –Ω–æ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ —á–µ—Ä–µ–∑ job_queue
    application.job_queue.run_once(
        lambda context: load_reminders_on_startup_wrapper(context, application),
        when=datetime.timedelta(seconds=5) # –î–∞–µ–º –±–æ—Ç—É –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∑–∞–ø—É—Å–∫ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("addreminder", add_reminder_command))
    application.add_handler(CommandHandler("myreminders", show_my_reminders))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


async def load_reminders_on_startup_wrapper(context: ContextTypes.DEFAULT_TYPE, application: Application):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ load_reminders_on_startup —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É."""
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT reminder_id, user_id, text, time, days FROM reminders WHERE active = 1')
    active_reminders = cursor.fetchall()
    conn.close()

    for r_id, user_id, text, time, days in active_reminders:
        try:
            schedule_reminder_job(context, user_id, r_id, text, time, days)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {r_id} –Ω–∞ —Å—Ç–∞—Ä—Ç–µ: {e}")
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {len(active_reminders)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")


if __name__ == '__main__':
    main()
